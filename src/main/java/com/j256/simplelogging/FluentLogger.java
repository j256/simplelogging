package com.j256.simplelogging;

/**
 * "Fluent" logger class which uses chaining as opposed to many methods to support the logging calls. This causes no
 * additional object if logging level is not enabled, even if using primitives. Stole the idea from Google's fluent
 * logging (https://google.github.io/flogger/). You get a fluent-logger by calling
 * {@link LoggerFactory#getFluentLogger(String)}.
 * 
 * For example, even with port being an int primitive below, there are no objects generated by thus call unless TRACE
 * log level is enabled.
 * 
 * <pre>
 * fluentLogger.atLevel(Level.TRACE) <!-- -->
 *   .msg("connected to host '{}' port '{}'") <!-- -->
 *   .arg(host) <!-- -->
 *   .arg(port) <!-- -->
 *   .log();
 * </pre>
 * 
 * From SimpleLogging: https://github.com/j256/simplelogging
 *
 * @author graywatson
 */
public class FluentLogger {

	private final static MuteContext MUTE_CONTEXT = new MuteContext();

	private final Logger logger;

	public FluentLogger(Logger logger) {
		this.logger = logger;
	}

	/**
	 * Set the log level for all of the loggers. This should be done very early in an application's main or launch
	 * methods. It allows the caller to set a filter on all log messages. Set to null to disable any global log level
	 * filtering of messages and go back to the per-log level matching.
	 * 
	 * NOTE: this is a call through to {@link Logger#setGlobalLogLevel(Level)}.
	 */
	public static void setGlobalLogLevel(Level level) {
		Logger.setGlobalLogLevel(level);
	}

	/**
	 * Return true if logging level is enabled else false.
	 */
	public boolean isLevelEnabled(Level level) {
		return logger.isLevelEnabled(level);
	}

	/**
	 * Start of the chaining that sets the level of the message. If this level is not enabled then this method returns a
	 * mute constant context and all calls to it are no-ops.
	 */
	public FluentContext atLevel(Level level) {
		if (isLevelEnabled(level)) {
			return new FluentContextImpl(logger, level);
		} else {
			return MUTE_CONTEXT;
		}
	}

	/**
	 * Context that doesn't do anything. This is returned when the log level is not enabled.
	 */
	private static class MuteContext implements FluentContext {

		@Override
		public FluentContext msg(String message) {
			return this;
		}

		@Override
		public FluentContext throwable(Throwable th) {
			return this;
		}

		@Override
		public FluentContext arg(Object arg) {
			return this;
		}

		@Override
		public FluentContext args(Object[] args) {
			return this;
		}

		@Override
		public FluentContext arg(boolean arg) {
			return this;
		}

		@Override
		public FluentContext arg(byte arg) {
			return this;
		}

		@Override
		public FluentContext arg(char arg) {
			return this;
		}

		@Override
		public FluentContext arg(short arg) {
			return this;
		}

		@Override
		public FluentContext arg(int arg) {
			return this;
		}

		@Override
		public FluentContext arg(long arg) {
			return this;
		}

		@Override
		public FluentContext arg(float arg) {
			return this;
		}

		@Override
		public FluentContext arg(double arg) {
			return this;
		}

		@Override
		public void log() {
			// no-op
		}
	}
}
