\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename simplelogging.info
@settitle SimpleLogging Documentation
@headings double
@c %**end of header

@c ----------------------------------------------------------------
@set simplelogging_version 3.0
@set simplelogging_year 2024
@set simplelogging_date February @value{simplelogging_year}
@set package SimpleLogging
@c ----------------------------------------------------------------

@titlepage
@headings off
@title SimpleLogging Package
@subtitle Version @value{simplelogging_version}
@subtitle @value{simplelogging_date}
@author Gray Watson

@page
This manual is licensed by Gray Watson under the Creative Commons Attribution-Share Alike 3.0 License.

Permission is granted to make and distribute verbatim copies of this manual provided this license notice and this
permission notice are preserved on all copies.
@end titlepage

@c ----------------------------------------------------------------

@c In the printed manual, we put the contents at the front.  For the digital manuals it is at the end. 
@iftex
@contents
@end iftex

@c ----------------------------------------------------------------
@node Top, Getting Started, (dir), (dir)
@top SimpleLogging
@everyheading @thischapter @| @thispage @| @today{}

Version @value{simplelogging_version} -- @value{simplelogging_date}

@cindex introduction
@cindex author
@cindex simple logging
@cindex logging facade
The goal of this library is to be a small logging facade that backends to a number of standard logging packages and that
can be copied into another project.  This allows you to write your code and include log messages without having a fixed
dependency on any one logging package.  I include this code into my libraries and so they can stay agnostic.  This
logging code allows you to write messages with the slf4j-style @code{@{@}} argument support, handles arrays
appropriately, and supports up to 4 arguments before forcing the caller to pass in an object array or calling a different
@code{logArgs(...)} method for variable arguments.

This library is similar to other logging systems which separate the API from the logging implementation.  SimpleLogging
is better than the others because it calls directly to specific backend APIs which can be chosen through code or
configuration. This direct calling allows for more control over the backend selection without addition additional
dependencies to the classpath.

SimpleLogging is also designed to be copied into your open source project so you don't have to add a maven dependency.
Just copy the java files from @code{src/main/java} into your source tree and rename the packages as necessary.  Please
also copy the @code{SIMPLELOGGING_LICENSE.txt} file which is the very permissive ISC license.  You may want to change
the constants in @code{LoggerConstants.java}.

To get started quickly using SimpleLogging, @pxref{Getting Started}.
@ifhtml
There is also a @uref{http://256stuff.com/sources/simplelogging/docs/simplelogging.pdf, PDF version of this documentation}.
@end ifhtml
@iftex
There is also a @uref{http://256stuff.com/sources/simplelogging/docs/simplelogging.html, HTML version of this documentation}.
@end iftex

Gray Watson @uref{http://256stuff.com/gray/}

@menu
* Getting Started::            Start using SimpleLogging quickly.
* Using::                      How to use SimpleLogging.
* License::                    Open Source license for the project.
* Index of Concepts::          Index of concepts in the manual.
@end menu

@c ----------------------------------------------------------------
@node Getting Started, Using, Top, Top
@chapter Getting Started

@cindex getting started
@cindex how to get started
@cindex quick start
@cindex Logger
To use SimpleLogging in your code is similar to other logging libraries that you are used to.

@example
// usually a logger will be per-class
// getLogger() also can take a String label
private static final Logger logger =
   LoggerFactory.getLogger(MyClass.class);
...

// log trace message with arguments
// toString() on the args only called if trace messages enabled
logger.trace("some trace information: @{@} and @{@}", arg1, arg2);
...

// NOTE: exception argument comes _before_ the
// message format to not confuse the arguments
logger.error(exception, "http client threw getting URL: @{@}", url);
@end example

For more extensive instructions, @pxref{Using}.

@c ----------------------------------------------------------------
@node Using, Downloading, Getting Started, Top
@chapter Using SimpleLogging

@cindex how to use
@cindex using SimpleLogging
@menu
* Downloading ::                   Downloading the SimpleLogging jar.
* Depending on SimpleLogging ::    How to depend on the library.
* Logging Arguments ::             Logging messages with @{@} arguments.
* Setting Log Level ::             Setting the log level or disabling logging.
* Fluent Logging ::                How to use "fluent" logging with method chaining.
* Backend Discovery ::             How the logging backend is discovered.
* SimpleLogging Properties File :: Configuring logging with the properties file.
* More Usage Examples ::           More examples on how to use the loggers.
* Maven ::                         How to use with Maven.
@end menu

@c ----------------------------------------------------------------
@node Downloading, Depending on SimpleLogging, Using, Using
@section Downloading Jar

@cindex how to download the jars
@cindex downloading the jars
@cindex where to get new jars
To get started with SimpleLogging, you will need to download the jar file.  The
@uref{http://256stuff.com/sources/simplelogging/releases/, SimpleLogging release page} is the default repository but the
jars are also available from the @uref{https://repo1.maven.org/maven2/com/j256/simplelogging/simplelogging/, central
maven repository}.

The code works with Java 8 or later.

@c ----------------------------------------------------------------
@node Depending on SimpleLogging, Logging Arguments, Downloading, Using
@section Depending on SimpleLogging in Your Library

@cindex using in your library
@cindex log type of backends
@cindex copying code

To use the SimpleLogging code in your library, you can either depend on the jar or just copy the classes into a logging
package in your code and rename the package as necessary.  You may want to tune the order of discovery in the
@code{LogBackendType} enumerated class or remove support for certain loggers that your library doesn't need to support.

SimpleLogging is designed to be copied into your open source project so you don't have to add a dependency.  Just copy
the java files from @code{src/main/java} into your source tree and rename the packages as necessary.  Please also copy
the @code{SIMPLELOGGING_LICENSE.txt} file which is the very permissive ISC license.  You may want to change the
constants in @code{LoggerConstants.java}.

@c ----------------------------------------------------------------
@node Logging Arguments, Setting Log Level, Depending on SimpleLogging, Using
@section Logging Messages with @{@} Arguments

@cindex message arguments
@cindex arguments in the message
@cindex @{@} arguments
SimpleLogging supports "slf4j" type of arguments.  Whenever the @code{@{@}} characters appear in your logging message,
the library will look for arguments to substitute into the @code{@{@}}.  For example:

@example
String host = "server1";
logger.info("connected to host @{@}", host);
@end example

If info messages are being displayed then the following message will be logged:

@example
connection to host server1 failed
@end example

This can be accomplished with a simple @code{StringBuilder} but the big difference is that no unnecessary objects will
be created @emph{unless} the log message is to be written.  If the logger is limited to warning messages and above, no
@code{StringBuilder} will be created and the @code{toString()} method for the arguments will never be called if the
above info log call is made.

By default the various log methods (@code{logger.trace(...)}, @code{logger.debug(...)}, ...) take 0 to 4 arguments with
no objects being created (aside from some possible auto-boxing of numbers).  If you need more arguments you can use the
argument-array with a explicit @code{new Object[] @{ ... @}} pattern or use variable arguments with a call to
@code{logger.traceArgs(...)}, @code{logger.debugArgs(...)}, etc..  The variable arguments also creates an @code{Object[]}
regardless of whether or not the log message will be logged so SimpleLogging wants you to be explicit about creating it.
It is recommended that you test for the log level with an @code{if} statement when you are logging with the
@code{Object[]} or variable arguments.
 
@example
if (logger.isLevelEnabled(Level.TRACE)) @{
   // here's with an explicit object array
   logger.trace("Method args: @{@}, @{@}, @{@}, @{@}, @{@}",
       new Object[] @{ schema, host, port, path, query @});
   // here's with a variable arguments with traceArgs()
   logger.traceArgs("Method args: @{@}, @{@}, @{@}, @{@}, @{@}",
       schema, host, port, path, query);
@}
@end example

Here's how the arguments are turned into strings in the log message:

@cindex null argument logging
@cindex LogMessageCreator
@cindex toString, don't use
@cindex array argument logging
@enumerate
@item if you pass no arguments to the logger call, then any @code{@{@}} patterns will be displayed with no substitution
@item if you have more @code{@{@}} patterns in the message than arguments, then any extras will output the empty string
@item if you have more arguments than you have @code{@{@}} patterns in the message then they will be ignored
@item @code{null} values will output the string @code{null}
@item arrays will be displayed as @code{[ele1, ele2, ...]} with each element going through the same logic here
@item if the argument implements @code{LogArgumentCreator} then the results of @code{arg.createLogArg()} will be
displayed
@item by default @code{arg.toString()} will be displayed
@end enumerate

Here are examples of these rules.

@example
// no arguments but a @{@} pattern
logger.info("connected to host '@{@}'");
// outputs: connected to host '@{@}'

// missing argument to second @{@} displays as empty string
String host = "host1";
logger.info("connected to host '@{@}' port '@{@}'", host);
// outputs: connected to host 'host1' port ''

// extra argument (port) is ignored
String host = "host1";
int port = 443;
logger.info("connected to host '@{@}'", host, port);
// outputs: connected to host 'host1'

// null argument
String host = null;
logger.info("connected to host '@{@}' failed", host);
// outputs: connected to host 'null'

// arguments that are arrays
String[] hosts = new String[] @{ "srv1", "srv2" @};
logger.info("connected to hosts @{@} failed", hosts);
// outputs: connected to hosts [srv1, srv2]

// logging of Host which implements LogArgumentCreator where
// host.createLogArg() method returns the string: host4
Host host = new Host();
logger.info("connected to host '@{@}'", host);
// outputs: connected to host 'host4'

// logging of Server where server.toString() returns: srv3
Server server = new Server();
logger.info("connected to host '@{@}'", server);
// outputs: connected to host 'srv3'

@end example

@c ----------------------------------------------------------------
@node Setting Log Level, Fluent Logging, Logging Arguments, Using
@section Setting Log Level or Disabling Logging

@cindex log level, setting
@cindex setting log level

By default the choice of whether or not to log, for example, a trace log message is up to the specific
log backend.  For example. if you are using LOG4J2, your LOG4J2 config file determines whether or not
trace logging is enabled for a particular package.  That said, there are some ways that you can impact
in code which messages will get logged with calls to the SimpleLogging methods regardless of the log
backend.

@example
// have all INFO or above messages to be logged
// regardless of the backend configurations
Logger.setGlobalLogLevel(Level.INFO);
@end example

@cindex disable all messages
@cindex turn off all messages
@cindex remove all messages
You can also disable all log messages by using the @code{OFF} level:

@example
// force all messages to be disabled
Logger.setGlobalLogLevel(Level.OFF);
@end example

Another way to not have any log messages show would be use use the @code{NULL} log backend.

@example
// set the backend type to be the null logger
LoggerFactory.setLogBackendType(LogBackendType.NULL);
@end example

To set the global log level via properties @pxref{SimpleLogging Properties File}.

@c ----------------------------------------------------------------
@node Fluent Logging, Backend Discovery, Setting Log Level, Using
@section Using "Fluent" Logging Method Chaining

@cindex fluent logging
@cindex method chaining
@cindex chaining methods
@cindex objects, avoiding
@cindex autoboxing, avoiding
@cindex avoiding objects

Another pattern supported by SimpleLogging is the "fluent" logging which uses method chaining to build up a log message.
The benefit of this method are that no objects are created by the log call unless the log level is enabled.  Typically,
primitives are auto-boxed into their object equivalents in a standard SimpleLogging logger before it can check to see if
the log level is enabled but fluent logging handles those without creating objects as well.

For example, even with port being an @code{int} primitive below, there are no objects generated by thus call unless
@code{TRACE} log level is enabled.

@example
// create a fluent logger instead of a logger
private static final FluentLogger fluentLogger =
   LoggerFactory.getFluentLogger(MyClass.class);
...
// this generates no additional objects even due to auto-boxing
// of port unless trace logging is enabled
fluentLogger.atTrace()
    .msg("connected to host '@{@}' port '@{@}'")
    .arg(host)
    .arg(port)
    .log();
@end example

@cindex arrays, fluent logging
Logging of arrays in fluent logging can be done one of two ways.  You can use the @code{flientLogger.args(...)}
method to add an array of object arguments to the log message, each element of which will match a @{@} from the
message. If you want an array to be associated with a single @{@} and displayed as @code{[arg1, arg2, ...]}
then you need to use the method @code{fluentLogger.arg(Object)} which will interpret the array as a single object.

For example, the following code which calls this @code{args(...)} method will output: "1 + 2 = 3"

@example
fluentLogger.msg("@{@} + @{@} = @{@}").args(new Object[] @{ 1, 2, 3 @}).log();
@end example

While the following code which calls @code{arg(...)} will output: "port numbers: [1, 2, 3]" which interprets the
array as an @code{Object} and will match a single @{@} from the message.

@example
fluentLogger.msg("port numbers: @{@}").arg(new Object[] @{ 1, 2, 3 @}).log();
@end example

You can also append to a previous log message set with @code{msg(String)} in case you want to do something like
the following logic:

@example
FluentContext context = fluentLogger.atTrace().msg("connection from: ");
if (host != null) @{
    context.appendMsg("host @{@}, ").arg(host);
@}
context.appendMsg("port @{@}").arg(port);
context.log();
@end example

@c ----------------------------------------------------------------
@node Backend Discovery, SimpleLogging Properties File, Setting Log Level, Using
@section How SimpleLogging Discovers the Logging Backend

@cindex discovering backend
@cindex backend, discovering
@cindex log backend discovery
Built into the @code{LoggerFactory} class is a @code{LogBackendType} enumerated type which SimpleLogging uses to try to
locate what logging packages are on the classpath and therefore should be used.

The following logging implementations will be discovered on the classpath in this order.

@cindex android logging, use with
@cindex logback direct, use with
@cindex log4j2, use with
@cindex log4j, use with
@cindex lambda logging, use with
@cindex aws lambda logging, use with
@cindex slf4j, use with
@cindex commons logging, use with
@cindex console logging
@cindex java util logging, use with
@cindex disable logging
@cindex null logger

@enumerate

@item ANDROID -- Android native Log
@item LOGBACK -- Logback direct without SLF4J
@item LOG4J2 -- version 2+
@item LOG4J -- older, only used via reflection if available on the classpath
@item LAMBDA -- AWS Lambda systems logging
@item SLF4J -- (often paired with logback)
@item COMMONS_LOGGING -- Apache Commons Logging
@item LOCAL -- log implementation that can write to a simple file
@item CONSOLE -- log writing to @code{System.out} or @code{System.err}
@item JAVA_UTIL -- Java util logging which is usually available in the JRE but never chosen directly
@item NULL -- null logger to log no messages

@end enumerate

If you need to force the logging type, you can use the following static methods.

@example
// used to set a specific LoggerFactory.LogBackendType
LoggerFactory.setLogBackendType(LogBackendType.LOGBACK);
@end example

Or to specify a specifically factory class including custom ones:

@example
// used to set a specific LoggerFactory or custom
LoggerFactory.setLogBackendFactory(new LogbackLogBackendFactory());
@end example

@cindex system property
@cindex java property
@cindex property, system
@cindex com.j256.simplelogger.backend property

You can also set the @code{com.j256.simplelogger.backend} Java system property to one of the @code{LogBackendType}
values in the above list.

@example
java -Dcom.j256.simplelogger.backend=LOGBACK ...
@end example

You can also set the property to be a class name that implements @code{LogBackendFactory}.

@example
java -Dcom.j256.simplelogger.backend=com.j256.simplelogging.backend.LogbackLogBackend$LogbackLogBackendFactory ...
@end example

To set the backend via properties @pxref{SimpleLogging Properties File}.

@c ----------------------------------------------------------------
@node SimpleLogging Properties File, More Usage Examples, Backend Discovery, Using
@section Configuring Logging with the SimpleLogging Properties File

@cindex properties file
@cindex simplelogging properties
@cindex logging properties
@cindex configuration properties

By default the library will look for the @code{simplelogging.properties} properties file at the top of the classpath
which will help to configure the logging backend, the global log-level, and local-log level for classes.  It handles
comments on lines that start with @code{#} and lines in the format of @code{name = value}. 

You can set the backend directly to one of the LogBackendType enum names:

@cindex discovering backend
@cindex backend, discovering
@cindex log backend discovery

@example
backend = LOG4J2
@end example

You can also set the backend to a class that implements @code{LogBackendFactory}:

@example
backend = com.mysite.MyLoggingLogBackend.Factory
@end example

@cindex backend discovery order

You can also set the order to check for the various backend implementations:

@example
dicovery.order = LOGBACK, LOG4J2, COMMONS_LOGGING, NULL
@end example

You can also set the global log level which affects all loggers regardless of the backend log level configuration.

@example
global.level = INFO
@end example

You can set the level to the string @code{OFF} to disable all logs.

@example
global.level = OFF
@end example

You can also disable the default global log level and let the backends determine the level by setting the global 
level property to @code{NULL}:

@example
global.level = NULL
@end example

If you are using the @code{LocalLog} backend, you can also use the configuration file to define  the log level of
your various logger classes.  Lines for this should look like @code{locallog.class-regex-pattern = level}.  You should
escape any period characters with a single backslash unless they are part of a regex match. 

@example
locallog.com\.j256\.simplelogging.* = DEBUG
@end example

@c ----------------------------------------------------------------
@node More Usage Examples, Maven, SimpleLogging Properties File, Using
@section More Usage Examples

Usually the logger is defined per-class as a @code{static} field.

@example
private static final Logger logger =
   LoggerFactory.getLogger(MyClass.class);
@end example

The logger handles trace, debug, info, warn, error, and fatal messages.  Not all of these message types
are supported by all of the logger backends so SimpleLogging tries to map where appropriate. 

@example
logger.trace("read '@{@}' bytes", readCount);
logger.debug("host '@{@}', port-number @{@}", host, port);
logger.info("connecting to: @{@}:@{@}", host, port);
logger.warn("retry connect to host '@{@}', port @{@}", host, port);
logger.error("connect failed to host '@{@}', port @{@}", host, port);
logger.fatal(exception, "host '@{@}' threw exception", host);
@end example

If you want to use more than 4 arguments, you will either need to pass in an @code{Object[]} or
call the methods with the @code{Args} suffix.  This is a specific design decision because in
either case, an @code{Object[]} is created even if the message is never logged.

@example
logger.debug("schema '@{@}', host '@{@}', port @{@}, path @{@}, query @{@}",
     new Object[] @{ schema, host, port, path, query @});
@end example

@cindex varargs, use with
@cindex variable arguments, use with
Or with variable arguments with methods that have an @code{Args} suffix such as @code{debugArgs(...)}.

@example
logger.debugArgs("scheme '@{@}', host '@{@}', port @{@}, path: @{@}",
     schema, host, port, path);
@end example

@c ----------------------------------------------------------------
@node Maven, License, More Usage Examples, Using
@section Using With Maven

@cindex Maven, use with
@cindex pom.xml dependency
To use SimpleLogging with maven, include the following dependency in your @file{pom.xml} file:

@example
<dependency>
   <groupId>com.j256.simplelogging</groupId>
   <artifactId>simplelogging</artifactId>
   <version>@value{simplelogging_version}</version>
</dependency>
@end example 

@c ----------------------------------------------------------------
@node License, Index of Concepts, Maven, Top
@chapter Open Source License

@cindex license
@cindex isc license
@cindex open source license
@uref{https://opensource.org/licenses/ISC, ISC License}.  This document is part of the SimpleLogging project. 

Copyright @value{simplelogging_year}, Gray Watson

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
provided that this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.

@c ----------------------------------------------------------------
@node Index of Concepts,, License, Top
@unnumbered Index of Concepts

@printindex cp

@ifhtml
@contents
@end ifhtml

@bye
